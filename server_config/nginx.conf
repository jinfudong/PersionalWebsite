#运行用户，默认即是nginx，可不设置
user nginx;

#nginx进程,一般设置为和cpu核数一样
worker_processes 1;

#错误日志存放目录 
error_log /var/www/PW/log/error.log warn;

#进程pid存放位置
pid /var/run/nginx.pid;

#最大文件打开数（连接），可设置为系统优化后的ulimit -HSn的结果
#worker_rlimit_nofile 51200;

#cpu亲和力配置，让不同的进程使用不同的cpu
#worker_cpu_affinity 0001 0010 0100 1000 0001 00100100 1000;

events {
	#epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能
	#use epoll; 
	
	#单个后台worker process进程的最大并发链接数
    worker_connections  1024;
}


http {
	#文件扩展名与类型映射表
    include     /etc/nginx/mime.types;
	
	#默认文件类型
    default_type  application/octet-stream;
	
	#limit模块，可防范一定量的DDOS攻击
	#用来存储session会话的状态，如下是为session分配一个名为one的10M的内存存储区，限制了每秒只接受一个ip的一次请求 1r/s
    #limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;
    #limit_conn_zone $binary_remote_addr zone=addr:10m;
	
	#设定请求缓存    
    #server_names_hash_bucket_size 128;
    #client_header_buffer_size 512k;
    #large_client_header_buffers 4 512k;
    #client_max_body_size 100m;
	
	#隐藏响应header和错误通知中的版本号
	#server_tokens off;
	
	#开启高效传输模式   
    #sendfile on;
	
	#FastCGI相关参数：为了改善网站性能：减少资源占用，提高访问速度
	#fastcgi_connect_timeout 300;
	#fastcgi_send_timeout 300;
	#fastcgi_read_timeout 300;
	#fastcgi_buffer_size 64k;
	#fastcgi_buffers 4 64k;
	#fastcgi_busy_buffers_size 128k;
	#fastcgi_temp_file_write_size 128k;
    
	#设置日志模式
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

	#设置日志存放位置
    access_log  /var/www/PW/log/access.log  main;

    sendfile    on;
	
	#激活tcp_nopush参数可以允许把httpresponse header和文件的开始放在一个文件里发布，积极的作用是减少网络报文段的数量
    #tcp_nopush on;
	
	#激活tcp_nodelay，内核会等待将更多的字节组成一个数据包，从而提高I/O性能
    #tcp_nodelay on;

	#连接超时时间，单位是秒
    keepalive_timeout  65;

	#开启gzip压缩功能
    #gzip  on;
	
	#设置允许压缩的页面最小字节数，页面字节数从header头的Content-Length中获取。默认值是0，表示不管页面多大都进行压缩。建议设置成大于1K。如果小于1K可能会越压越大。
    #gzip_min_length  1k;
	
	#压缩缓冲区大小。表示申请4个单位为16K的内存作为压缩结果流缓存，默认值是申请与原始数据大小相同的内存空间来存储gzip压缩结果。
    #gzip_buffers     4 16k;
	
	#压缩版本（默认1.1，前端为squid2.5时使用1.0）用于设置识别HTTP协议版本，默认是1.1，目前大部分浏览器已经支持GZIP解压，使用默认即可。
    #gzip_http_version 1.0;
	
	#压缩比率。用来指定GZIP压缩比，1压缩比最小，处理速度最快；9压缩比最大，传输速度快，但处理最慢，也比较消耗cpu资源。
    #gzip_comp_level 9;
	
	#用来指定压缩的类型，“text/html”类型总是会被压缩
    #gzip_types       text/plain application/x-javascript text/css application/xml;
	
	#vary header支持。该选项可以让前端的缓存服务器缓存经过GZIP压缩的页面，例如用Squid缓存经过Nginx压缩的数据。
	#gzip_vary off;
	
	#开启ssi支持，默认是off
    #ssi on;
    #ssi_silent_errors on;

    #proxy_request_buffering off;
    #proxy_buffering off;
    proxy_buffers   4 32k;

	#反向代理负载均衡设定部分
	#upstream表示负载服务器池，定义名字为my_server的服务器池
    upstream my_server{
        server 127.0.0.1:31415 weight=1;
        #server IP:PORT ip_hash;
        #server IP:PORT fair;
        #server IP:PORT url_hash;
        #server IP:PORT backup;
        #server IP:PORT down;
    }
	#设置由 fail_timeout 定义的时间段内连接该主机的失败次数，以此来断定 fail_timeout 定义的时间段内该主机是否可用。默认情况下这个数值设置为 1。零值的话禁用这个数量的尝试。
    #设置在指定时间内连接到主机的失败次数，超过该次数该主机被认为不可用。
    #weight=1 max_fails=2 fail_timeout=30s;这里是在30s内尝试2次失败即认为主机不可用！

	#基于域名的虚拟主机
    server {
		#监听端口
		listen       80;
		server_name  10.0.122.119;
		
		#站点根目录，即网站程序存放目录
		root   /var/www/PW;

		location /static {
			alias /var/www/PW/static;
		}
		location / {
	        include /etc/nginx/uwsgi_params;
			uwsgi_pass my_server;
		}
	}
}
